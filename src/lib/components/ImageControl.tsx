import React from 'react';
import { useControlState } from '../hooks/UseControlState';
import { ControlProps } from '../types/FormConfig';
import { getNestedValue } from '../common/functions';

export const ImageControl: React.FC<ControlProps> = ({ config, parentPath, additionalProps }) => {
    const { key, dataPath, isVisible, isDisabled, state } = useControlState(config, parentPath);
    // const base64ImageData = getNestedValue(state.data, dataPath); // Assuming this is the Base64 string
    const base64ImageData = ``;
    const { altText = '', hideLabel = false, mimeType = 'image/jpeg' } = additionalProps; // Default to JPEG format

    if (!isVisible || !base64ImageData) return null;

    // Construct a Base64 data URL
    const imageSrc = `data:${mimeType};base64,${base64ImageData}`;

    return (
        <div style={{ textAlign: 'center' }}>
            {!hideLabel && <label htmlFor={dataPath}>{config.label}</label>}
            <img
                id={dataPath}
                src={imageSrc}
                alt={altText || 'Image'}
                style={{
                    maxWidth: '100%',
                    maxHeight: '300px',
                    display: 'block',
                    margin: '10px auto',
                    opacity: isDisabled ? 0.5 : 1,
                }}
            />
        </div>
    );
};
